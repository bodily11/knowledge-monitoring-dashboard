#import Student, Course, Quiz, QuizType, Question, QuestionType, QuestionCreateInput, QuestionUpdateInput QuestionUpdateManyInput, Option, QuizAttempt, QuizAttemptOrderByInput, QuestionAttempt, ConceptConfidence, SurveyResult, TrackingEventAction, TrackingEvent from "./generated/prisma.graphql"

type Query {
  quiz(id:ID): Quiz!
  currentInstructor: Instructor!
  course(id:ID): Course!
  courseConcepts(id:ID): [String!]!
  question(id:ID): Question!
  currentStudent: Student!
  currentStudentQuizAttempts(orderBy: QuizAttemptOrderByInput, courseId: ID): [QuizAttempt!]!
  quizAttempt(id: ID!): QuizAttempt!
}

type Mutation {
  updateQuiz(id: ID!, data: QuizUpdateInput!): Quiz
  addCourse(title:String): Course!
  createQuiz(courseId: ID!): Quiz!
  updateCourse(id:ID, info: CourseInfoUpdateInput): Course!
  deleteCourse(id:ID):Course!
  deleteQuiz(id:ID): Quiz!
  addQuestion(quizId: ID, question: QuestionCreateInput!): Question!
  updateQuestion(id: ID!, data: QuestionUpdateInput!): Question!
  deleteQuestion(id:ID): Question!
  importQuestions(quizId: ID!, questionIds: [ID!]!): Quiz!
  updateSurvey(courseId: ID!, survey: Json!): Course!
  sendInstructorCourseInvite(courseId: ID!, email: String!): String!
  removeInstructorFromCourse(courseId: ID!, email: String!): String!

  instructorSignup(email:String!, password:String!): InstructorAuthPayload
  instructorLogin(email:String!, password:String!): InstructorAuthPayload
  instructorRequestPasswordReset(email: String!): Boolean!
  instructorResetPassword(token: String!, password: String!): InstructorAuthPayload
  instructorUpdateProfile(id: ID!, currentPassword: String!, newEmail: String, newPassword: String): Boolean!
  sendFeedback(anonymous: Boolean!, message: String!): Boolean!

  startOrResumeQuizAttempt(quizId: ID!): QuizAttempt!
  completeQuizAttempt(quizAttemptId: ID!): QuizGradePayload!
  rateConcepts(quizAttemptId: ID!, conceptConfidences: [ConceptConfidenceCreateInput!]!): QuizAttempt!
  # attemptQuestion will be called with *either* optionId or shortAnswer, depending on the question type. In the future, this could be refactored into question-type-specific types
  attemptQuestion(quizAttemptId: ID!, questionId: ID!, type: QuestionType!, optionId: ID, shortAnswer: String, isConfident: Boolean!): QuestionAttempt!

  submitSurveyResult(courseId: ID!, answers: Json!): SurveyResult
  submitCourseConsent(courseId: ID!, consent: String!): Boolean!

  trackEvent(event: TrackingEventCreateInput!): TrackingEvent
}

# This is being redefined here, rather than imported, so that the password is hidden and can't be queried
type Instructor {
    id: ID!
    email: String!
    createdAt: DateTime!
    courses: [Course!]!
}

# Use a restricted subset of CourseUpdateInput (rather than Prisma’s full one), to avoid changing ltiSecret, modifying students, etc.
input CourseInfoUpdateInput {
  title: String
  number: String
  lmsUrl: String
  consentFormUrl: String
}

# Use a restricted and modified subset of QuizUpdateInput (rather than Prisma’s full one), to avoid changing students’ quiz attempts, the parent course, etc.
input QuizUpdateInput {
  title: String
  type: QuizType
  questions: QuestionUpdateManyInput
  orderedQuestionIds: [ID!]
}

# Returned from instructor signup or login
type InstructorAuthPayload {
  token: String
  instructor: Instructor
}

# Returned from posting a grade via LTI
type QuizGradePayload {
  quizAttempt: QuizAttempt!
  isGraded: Boolean!
  postSucceeded: Boolean
  error: String
}
