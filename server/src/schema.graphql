#import Student, Course, Quiz, QuizType, Question, Option, QuizAttempt, QuizAttemptOrderByInput, QuestionAttempt, ConceptConfidence, SurveyResult from "./generated/prisma.graphql"

type Query {
  quizzes: [Quiz!]!
  quiz(id:ID): Quiz!
  instructor: Instructor!
  courses: [Course!]!
  course(id:ID): Course!
  question(id:ID): Question!
  option(id:ID): Option!
  currentStudent: Student!
  currentStudentQuizAttempts(orderBy: QuizAttemptOrderByInput, courseId: ID): [QuizAttempt!]!
  currentStudentQuizAttempt(id: ID!): QuizAttempt!
}

type Mutation {
  addQuiz(id:ID): Course!
  updateQuiz(id:ID, title:String, type: QuizType): Quiz!
  addCourse(title:String): Course!
  createQuiz(courseId: ID!): Quiz!
  updateCourse(id:ID, title:String): Course!
  deleteCourse(id:ID):Course!
  deleteQuiz(id:ID): Quiz!
  addQuestion(id:ID): Quiz!
  updateQuestion(id:ID, prompt:String): Question!
  deleteQuestion(id:ID): Question!
  conceptQuestion(id:ID, concept:String): Question!
  conceptQuiz(id:ID, concepts:[String]): Quiz!
  conceptCourse(id:ID, concept:String): Course!
  updateOption(id:ID, text:String!, isCorrect:Boolean): Option!
  updateSurvey(courseId: ID!, survey: Json!): Course!

  instructorSignup(email:String!, password:String!): InstructorAuthPayload
  instructorLogin(email:String!, password:String!): InstructorAuthPayload

  startOrResumeQuizAttempt(quizId: ID!): QuizAttempt!
  completeQuizAttempt(quizAttemptId: ID!): QuizGradePayload!
  rateConcepts(quizAttemptId: ID!, conceptConfidences: [ConceptConfidenceCreateInput!]!): QuizAttempt!
  attemptQuestion(quizAttemptId: ID!, questionId: ID!, optionId: ID!, isConfident: Boolean!): QuestionAttempt!

  submitSurveyResult(courseId: ID!, answers: Json!): SurveyResult
}

# This is being redefined here, rather than imported, so that the password is hidden and can't be queried
type Instructor {
    id: ID!
    email: String!
    createdAt: DateTime!
    courses: [Course!]!
}

# Returned from instructor signup or login
type InstructorAuthPayload {
  token: String
  instructor: Instructor
}

# Returned from posting a grade via LTI
type QuizGradePayload {
  quizAttempt: QuizAttempt!
  isGraded: Boolean!
  postSucceeded: Boolean
  error: String
}
