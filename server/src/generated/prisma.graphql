# source: https://us1.prisma.sh/wadayano/wadayano/dev
# timestamp: Mon Jul 16 2018 09:35:17 GMT-0600 (MDT)

type AggregateConcept {
  count: Int!
}

type AggregateConceptConfidence {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateInstructor {
  count: Int!
}

type AggregateOption {
  count: Int!
}

type AggregateQuestion {
  count: Int!
}

type AggregateQuestionAttempt {
  count: Int!
}

type AggregateQuiz {
  count: Int!
}

type AggregateQuizAttempt {
  count: Int!
}

type AggregateStudent {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Concept implements Node {
  id: ID!
  title: String!
}

type ConceptConfidence implements Node {
  id: ID!
  concept(where: ConceptWhereInput): Concept!
  confidenceError: Float
  confidenceBias: Float
}

"""A connection to a list of items."""
type ConceptConfidenceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConceptConfidenceEdge]!
  aggregate: AggregateConceptConfidence!
}

input ConceptConfidenceCreateInput {
  confidenceError: Float
  confidenceBias: Float
  concept: ConceptCreateOneInput!
}

input ConceptConfidenceCreateManyInput {
  create: [ConceptConfidenceCreateInput!]
  connect: [ConceptConfidenceWhereUniqueInput!]
}

"""An edge in a connection."""
type ConceptConfidenceEdge {
  """The item at the end of the edge."""
  node: ConceptConfidence!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ConceptConfidenceOrderByInput {
  id_ASC
  id_DESC
  confidenceError_ASC
  confidenceError_DESC
  confidenceBias_ASC
  confidenceBias_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ConceptConfidencePreviousValues {
  id: ID!
  confidenceError: Float
  confidenceBias: Float
}

type ConceptConfidenceSubscriptionPayload {
  mutation: MutationType!
  node: ConceptConfidence
  updatedFields: [String!]
  previousValues: ConceptConfidencePreviousValues
}

input ConceptConfidenceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ConceptConfidenceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ConceptConfidenceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ConceptConfidenceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ConceptConfidenceWhereInput
}

input ConceptConfidenceUpdateDataInput {
  confidenceError: Float
  confidenceBias: Float
  concept: ConceptUpdateOneInput
}

input ConceptConfidenceUpdateInput {
  confidenceError: Float
  confidenceBias: Float
  concept: ConceptUpdateOneInput
}

input ConceptConfidenceUpdateManyInput {
  create: [ConceptConfidenceCreateInput!]
  connect: [ConceptConfidenceWhereUniqueInput!]
  disconnect: [ConceptConfidenceWhereUniqueInput!]
  delete: [ConceptConfidenceWhereUniqueInput!]
  update: [ConceptConfidenceUpdateWithWhereUniqueNestedInput!]
  upsert: [ConceptConfidenceUpsertWithWhereUniqueNestedInput!]
}

input ConceptConfidenceUpdateWithWhereUniqueNestedInput {
  where: ConceptConfidenceWhereUniqueInput!
  data: ConceptConfidenceUpdateDataInput!
}

input ConceptConfidenceUpsertWithWhereUniqueNestedInput {
  where: ConceptConfidenceWhereUniqueInput!
  update: ConceptConfidenceUpdateDataInput!
  create: ConceptConfidenceCreateInput!
}

input ConceptConfidenceWhereInput {
  """Logical AND on all given filters."""
  AND: [ConceptConfidenceWhereInput!]

  """Logical OR on all given filters."""
  OR: [ConceptConfidenceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ConceptConfidenceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  confidenceError: Float

  """All values that are not equal to given value."""
  confidenceError_not: Float

  """All values that are contained in given list."""
  confidenceError_in: [Float!]

  """All values that are not contained in given list."""
  confidenceError_not_in: [Float!]

  """All values less than the given value."""
  confidenceError_lt: Float

  """All values less than or equal the given value."""
  confidenceError_lte: Float

  """All values greater than the given value."""
  confidenceError_gt: Float

  """All values greater than or equal the given value."""
  confidenceError_gte: Float
  confidenceBias: Float

  """All values that are not equal to given value."""
  confidenceBias_not: Float

  """All values that are contained in given list."""
  confidenceBias_in: [Float!]

  """All values that are not contained in given list."""
  confidenceBias_not_in: [Float!]

  """All values less than the given value."""
  confidenceBias_lt: Float

  """All values less than or equal the given value."""
  confidenceBias_lte: Float

  """All values greater than the given value."""
  confidenceBias_gt: Float

  """All values greater than or equal the given value."""
  confidenceBias_gte: Float
  concept: ConceptWhereInput
  _MagicalBackRelation_ConceptConfidenceToQuizAttempt_every: QuizAttemptWhereInput
  _MagicalBackRelation_ConceptConfidenceToQuizAttempt_some: QuizAttemptWhereInput
  _MagicalBackRelation_ConceptConfidenceToQuizAttempt_none: QuizAttemptWhereInput
}

input ConceptConfidenceWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type ConceptConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ConceptEdge]!
  aggregate: AggregateConcept!
}

input ConceptCreateInput {
  title: String!
}

input ConceptCreateManyInput {
  create: [ConceptCreateInput!]
  connect: [ConceptWhereUniqueInput!]
}

input ConceptCreateOneInput {
  create: ConceptCreateInput
  connect: ConceptWhereUniqueInput
}

"""An edge in a connection."""
type ConceptEdge {
  """The item at the end of the edge."""
  node: Concept!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ConceptOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ConceptPreviousValues {
  id: ID!
  title: String!
}

type ConceptSubscriptionPayload {
  mutation: MutationType!
  node: Concept
  updatedFields: [String!]
  previousValues: ConceptPreviousValues
}

input ConceptSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ConceptSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ConceptSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ConceptSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ConceptWhereInput
}

input ConceptUpdateDataInput {
  title: String
}

input ConceptUpdateInput {
  title: String
}

input ConceptUpdateManyInput {
  create: [ConceptCreateInput!]
  connect: [ConceptWhereUniqueInput!]
  disconnect: [ConceptWhereUniqueInput!]
  delete: [ConceptWhereUniqueInput!]
  update: [ConceptUpdateWithWhereUniqueNestedInput!]
  upsert: [ConceptUpsertWithWhereUniqueNestedInput!]
}

input ConceptUpdateOneInput {
  create: ConceptCreateInput
  connect: ConceptWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ConceptUpdateDataInput
  upsert: ConceptUpsertNestedInput
}

input ConceptUpdateWithWhereUniqueNestedInput {
  where: ConceptWhereUniqueInput!
  data: ConceptUpdateDataInput!
}

input ConceptUpsertNestedInput {
  update: ConceptUpdateDataInput!
  create: ConceptCreateInput!
}

input ConceptUpsertWithWhereUniqueNestedInput {
  where: ConceptWhereUniqueInput!
  update: ConceptUpdateDataInput!
  create: ConceptCreateInput!
}

input ConceptWhereInput {
  """Logical AND on all given filters."""
  AND: [ConceptWhereInput!]

  """Logical OR on all given filters."""
  OR: [ConceptWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ConceptWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  _MagicalBackRelation_ConceptToConceptConfidence_every: ConceptConfidenceWhereInput
  _MagicalBackRelation_ConceptToConceptConfidence_some: ConceptConfidenceWhereInput
  _MagicalBackRelation_ConceptToConceptConfidence_none: ConceptConfidenceWhereInput
  _MagicalBackRelation_ConceptToQuestion_every: QuestionWhereInput
  _MagicalBackRelation_ConceptToQuestion_some: QuestionWhereInput
  _MagicalBackRelation_ConceptToQuestion_none: QuestionWhereInput
  _MagicalBackRelation_ConceptToCourse_every: CourseWhereInput
  _MagicalBackRelation_ConceptToCourse_some: CourseWhereInput
  _MagicalBackRelation_ConceptToCourse_none: CourseWhereInput
}

input ConceptWhereUniqueInput {
  id: ID
}

type Course implements Node {
  id: ID!
  title: String!
  createdAt: DateTime!
  quizzes(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz!]
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept!]
}

"""A connection to a list of items."""
type CourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  title: String!
  quizzes: QuizCreateManyInput
  concepts: ConceptCreateManyInput
}

input CourseCreateManyInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

"""An edge in a connection."""
type CourseEdge {
  """The item at the end of the edge."""
  node: Course!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CoursePreviousValues {
  id: ID!
  title: String!
  createdAt: DateTime!
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
}

input CourseUpdateDataInput {
  title: String
  quizzes: QuizUpdateManyInput
  concepts: ConceptUpdateManyInput
}

input CourseUpdateInput {
  title: String
  quizzes: QuizUpdateManyInput
  concepts: ConceptUpdateManyInput
}

input CourseUpdateManyInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  delete: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueNestedInput!]
  upsert: [CourseUpsertWithWhereUniqueNestedInput!]
}

input CourseUpdateWithWhereUniqueNestedInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateDataInput!
}

input CourseUpsertWithWhereUniqueNestedInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateDataInput!
  create: CourseCreateInput!
}

input CourseWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  quizzes_every: QuizWhereInput
  quizzes_some: QuizWhereInput
  quizzes_none: QuizWhereInput
  concepts_every: ConceptWhereInput
  concepts_some: ConceptWhereInput
  concepts_none: ConceptWhereInput
  _MagicalBackRelation_CourseToInstructor_every: InstructorWhereInput
  _MagicalBackRelation_CourseToInstructor_some: InstructorWhereInput
  _MagicalBackRelation_CourseToInstructor_none: InstructorWhereInput
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

type Instructor implements Node {
  id: ID!
  email: String!
  password: String!
  createdAt: DateTime!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
}

"""A connection to a list of items."""
type InstructorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InstructorEdge]!
  aggregate: AggregateInstructor!
}

input InstructorCreateInput {
  email: String!
  password: String!
  courses: CourseCreateManyInput
}

"""An edge in a connection."""
type InstructorEdge {
  """The item at the end of the edge."""
  node: Instructor!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InstructorOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type InstructorPreviousValues {
  id: ID!
  email: String!
  password: String!
  createdAt: DateTime!
}

type InstructorSubscriptionPayload {
  mutation: MutationType!
  node: Instructor
  updatedFields: [String!]
  previousValues: InstructorPreviousValues
}

input InstructorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InstructorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InstructorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InstructorSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InstructorWhereInput
}

input InstructorUpdateInput {
  email: String
  password: String
  courses: CourseUpdateManyInput
}

input InstructorWhereInput {
  """Logical AND on all given filters."""
  AND: [InstructorWhereInput!]

  """Logical OR on all given filters."""
  OR: [InstructorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InstructorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  courses_every: CourseWhereInput
  courses_some: CourseWhereInput
  courses_none: CourseWhereInput
}

input InstructorWhereUniqueInput {
  id: ID
  email: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createInstructor(data: InstructorCreateInput!): Instructor!
  createStudent(data: StudentCreateInput!): Student!
  createQuizAttempt(data: QuizAttemptCreateInput!): QuizAttempt!
  createQuiz(data: QuizCreateInput!): Quiz!
  createCourse(data: CourseCreateInput!): Course!
  createOption(data: OptionCreateInput!): Option!
  createConceptConfidence(data: ConceptConfidenceCreateInput!): ConceptConfidence!
  createQuestionAttempt(data: QuestionAttemptCreateInput!): QuestionAttempt!
  createQuestion(data: QuestionCreateInput!): Question!
  createConcept(data: ConceptCreateInput!): Concept!
  updateInstructor(data: InstructorUpdateInput!, where: InstructorWhereUniqueInput!): Instructor
  updateStudent(data: StudentUpdateInput!, where: StudentWhereUniqueInput!): Student
  updateQuizAttempt(data: QuizAttemptUpdateInput!, where: QuizAttemptWhereUniqueInput!): QuizAttempt
  updateQuiz(data: QuizUpdateInput!, where: QuizWhereUniqueInput!): Quiz
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateOption(data: OptionUpdateInput!, where: OptionWhereUniqueInput!): Option
  updateConceptConfidence(data: ConceptConfidenceUpdateInput!, where: ConceptConfidenceWhereUniqueInput!): ConceptConfidence
  updateQuestionAttempt(data: QuestionAttemptUpdateInput!, where: QuestionAttemptWhereUniqueInput!): QuestionAttempt
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateConcept(data: ConceptUpdateInput!, where: ConceptWhereUniqueInput!): Concept
  deleteInstructor(where: InstructorWhereUniqueInput!): Instructor
  deleteStudent(where: StudentWhereUniqueInput!): Student
  deleteQuizAttempt(where: QuizAttemptWhereUniqueInput!): QuizAttempt
  deleteQuiz(where: QuizWhereUniqueInput!): Quiz
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteOption(where: OptionWhereUniqueInput!): Option
  deleteConceptConfidence(where: ConceptConfidenceWhereUniqueInput!): ConceptConfidence
  deleteQuestionAttempt(where: QuestionAttemptWhereUniqueInput!): QuestionAttempt
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteConcept(where: ConceptWhereUniqueInput!): Concept
  upsertInstructor(where: InstructorWhereUniqueInput!, create: InstructorCreateInput!, update: InstructorUpdateInput!): Instructor!
  upsertStudent(where: StudentWhereUniqueInput!, create: StudentCreateInput!, update: StudentUpdateInput!): Student!
  upsertQuizAttempt(where: QuizAttemptWhereUniqueInput!, create: QuizAttemptCreateInput!, update: QuizAttemptUpdateInput!): QuizAttempt!
  upsertQuiz(where: QuizWhereUniqueInput!, create: QuizCreateInput!, update: QuizUpdateInput!): Quiz!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  upsertOption(where: OptionWhereUniqueInput!, create: OptionCreateInput!, update: OptionUpdateInput!): Option!
  upsertConceptConfidence(where: ConceptConfidenceWhereUniqueInput!, create: ConceptConfidenceCreateInput!, update: ConceptConfidenceUpdateInput!): ConceptConfidence!
  upsertQuestionAttempt(where: QuestionAttemptWhereUniqueInput!, create: QuestionAttemptCreateInput!, update: QuestionAttemptUpdateInput!): QuestionAttempt!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  upsertConcept(where: ConceptWhereUniqueInput!, create: ConceptCreateInput!, update: ConceptUpdateInput!): Concept!
  updateManyInstructors(data: InstructorUpdateInput!, where: InstructorWhereInput): BatchPayload!
  updateManyStudents(data: StudentUpdateInput!, where: StudentWhereInput): BatchPayload!
  updateManyQuizAttempts(data: QuizAttemptUpdateInput!, where: QuizAttemptWhereInput): BatchPayload!
  updateManyQuizzes(data: QuizUpdateInput!, where: QuizWhereInput): BatchPayload!
  updateManyCourses(data: CourseUpdateInput!, where: CourseWhereInput): BatchPayload!
  updateManyOptions(data: OptionUpdateInput!, where: OptionWhereInput): BatchPayload!
  updateManyConceptConfidences(data: ConceptConfidenceUpdateInput!, where: ConceptConfidenceWhereInput): BatchPayload!
  updateManyQuestionAttempts(data: QuestionAttemptUpdateInput!, where: QuestionAttemptWhereInput): BatchPayload!
  updateManyQuestions(data: QuestionUpdateInput!, where: QuestionWhereInput): BatchPayload!
  updateManyConcepts(data: ConceptUpdateInput!, where: ConceptWhereInput): BatchPayload!
  deleteManyInstructors(where: InstructorWhereInput): BatchPayload!
  deleteManyStudents(where: StudentWhereInput): BatchPayload!
  deleteManyQuizAttempts(where: QuizAttemptWhereInput): BatchPayload!
  deleteManyQuizzes(where: QuizWhereInput): BatchPayload!
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  deleteManyOptions(where: OptionWhereInput): BatchPayload!
  deleteManyConceptConfidences(where: ConceptConfidenceWhereInput): BatchPayload!
  deleteManyQuestionAttempts(where: QuestionAttemptWhereInput): BatchPayload!
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
  deleteManyConcepts(where: ConceptWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Option implements Node {
  id: ID!
  isCorrect: Boolean
  text: String!
}

"""A connection to a list of items."""
type OptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OptionEdge]!
  aggregate: AggregateOption!
}

input OptionCreateInput {
  isCorrect: Boolean
  text: String!
}

input OptionCreateManyInput {
  create: [OptionCreateInput!]
  connect: [OptionWhereUniqueInput!]
}

input OptionCreateOneInput {
  create: OptionCreateInput
  connect: OptionWhereUniqueInput
}

"""An edge in a connection."""
type OptionEdge {
  """The item at the end of the edge."""
  node: Option!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OptionOrderByInput {
  id_ASC
  id_DESC
  isCorrect_ASC
  isCorrect_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OptionPreviousValues {
  id: ID!
  isCorrect: Boolean
  text: String!
}

type OptionSubscriptionPayload {
  mutation: MutationType!
  node: Option
  updatedFields: [String!]
  previousValues: OptionPreviousValues
}

input OptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OptionWhereInput
}

input OptionUpdateDataInput {
  isCorrect: Boolean
  text: String
}

input OptionUpdateInput {
  isCorrect: Boolean
  text: String
}

input OptionUpdateManyInput {
  create: [OptionCreateInput!]
  connect: [OptionWhereUniqueInput!]
  disconnect: [OptionWhereUniqueInput!]
  delete: [OptionWhereUniqueInput!]
  update: [OptionUpdateWithWhereUniqueNestedInput!]
  upsert: [OptionUpsertWithWhereUniqueNestedInput!]
}

input OptionUpdateOneInput {
  create: OptionCreateInput
  connect: OptionWhereUniqueInput
  delete: Boolean
  update: OptionUpdateDataInput
  upsert: OptionUpsertNestedInput
}

input OptionUpdateWithWhereUniqueNestedInput {
  where: OptionWhereUniqueInput!
  data: OptionUpdateDataInput!
}

input OptionUpsertNestedInput {
  update: OptionUpdateDataInput!
  create: OptionCreateInput!
}

input OptionUpsertWithWhereUniqueNestedInput {
  where: OptionWhereUniqueInput!
  update: OptionUpdateDataInput!
  create: OptionCreateInput!
}

input OptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isCorrect: Boolean

  """All values that are not equal to given value."""
  isCorrect_not: Boolean
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  _MagicalBackRelation_OptionToQuestion_every: QuestionWhereInput
  _MagicalBackRelation_OptionToQuestion_some: QuestionWhereInput
  _MagicalBackRelation_OptionToQuestion_none: QuestionWhereInput
  _MagicalBackRelation_OptionToQuestionAttempt_every: QuestionAttemptWhereInput
  _MagicalBackRelation_OptionToQuestionAttempt_some: QuestionAttemptWhereInput
  _MagicalBackRelation_OptionToQuestionAttempt_none: QuestionAttemptWhereInput
}

input OptionWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  instructors(where: InstructorWhereInput, orderBy: InstructorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Instructor]!
  students(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Student]!
  quizAttempts(where: QuizAttemptWhereInput, orderBy: QuizAttemptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuizAttempt]!
  quizzes(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quiz]!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option]!
  conceptConfidences(where: ConceptConfidenceWhereInput, orderBy: ConceptConfidenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConceptConfidence]!
  questionAttempts(where: QuestionAttemptWhereInput, orderBy: QuestionAttemptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionAttempt]!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  concepts(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Concept]!
  instructor(where: InstructorWhereUniqueInput!): Instructor
  student(where: StudentWhereUniqueInput!): Student
  quizAttempt(where: QuizAttemptWhereUniqueInput!): QuizAttempt
  quiz(where: QuizWhereUniqueInput!): Quiz
  course(where: CourseWhereUniqueInput!): Course
  option(where: OptionWhereUniqueInput!): Option
  conceptConfidence(where: ConceptConfidenceWhereUniqueInput!): ConceptConfidence
  questionAttempt(where: QuestionAttemptWhereUniqueInput!): QuestionAttempt
  question(where: QuestionWhereUniqueInput!): Question
  concept(where: ConceptWhereUniqueInput!): Concept
  instructorsConnection(where: InstructorWhereInput, orderBy: InstructorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InstructorConnection!
  studentsConnection(where: StudentWhereInput, orderBy: StudentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StudentConnection!
  quizAttemptsConnection(where: QuizAttemptWhereInput, orderBy: QuizAttemptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuizAttemptConnection!
  quizzesConnection(where: QuizWhereInput, orderBy: QuizOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuizConnection!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  optionsConnection(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OptionConnection!
  conceptConfidencesConnection(where: ConceptConfidenceWhereInput, orderBy: ConceptConfidenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConceptConfidenceConnection!
  questionAttemptsConnection(where: QuestionAttemptWhereInput, orderBy: QuestionAttemptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionAttemptConnection!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  conceptsConnection(where: ConceptWhereInput, orderBy: ConceptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ConceptConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Question implements Node {
  id: ID!
  options(where: OptionWhereInput, orderBy: OptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Option!]
  prompt: String!
  concept(where: ConceptWhereInput): Concept
}

type QuestionAttempt implements Node {
  id: ID!
  createdAt: DateTime!
  question(where: QuestionWhereInput): Question!
  option(where: OptionWhereInput): Option!
  isCorrect: Boolean!
  isConfident: Boolean!
}

"""A connection to a list of items."""
type QuestionAttemptConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionAttemptEdge]!
  aggregate: AggregateQuestionAttempt!
}

input QuestionAttemptCreateInput {
  isCorrect: Boolean!
  isConfident: Boolean!
  question: QuestionCreateOneInput!
  option: OptionCreateOneInput!
}

input QuestionAttemptCreateManyInput {
  create: [QuestionAttemptCreateInput!]
  connect: [QuestionAttemptWhereUniqueInput!]
}

"""An edge in a connection."""
type QuestionAttemptEdge {
  """The item at the end of the edge."""
  node: QuestionAttempt!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionAttemptOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  isCorrect_ASC
  isCorrect_DESC
  isConfident_ASC
  isConfident_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QuestionAttemptPreviousValues {
  id: ID!
  createdAt: DateTime!
  isCorrect: Boolean!
  isConfident: Boolean!
}

type QuestionAttemptSubscriptionPayload {
  mutation: MutationType!
  node: QuestionAttempt
  updatedFields: [String!]
  previousValues: QuestionAttemptPreviousValues
}

input QuestionAttemptSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionAttemptSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionAttemptSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionAttemptSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionAttemptWhereInput
}

input QuestionAttemptUpdateDataInput {
  isCorrect: Boolean
  isConfident: Boolean
  question: QuestionUpdateOneInput
  option: OptionUpdateOneInput
}

input QuestionAttemptUpdateInput {
  isCorrect: Boolean
  isConfident: Boolean
  question: QuestionUpdateOneInput
  option: OptionUpdateOneInput
}

input QuestionAttemptUpdateManyInput {
  create: [QuestionAttemptCreateInput!]
  connect: [QuestionAttemptWhereUniqueInput!]
  disconnect: [QuestionAttemptWhereUniqueInput!]
  delete: [QuestionAttemptWhereUniqueInput!]
  update: [QuestionAttemptUpdateWithWhereUniqueNestedInput!]
  upsert: [QuestionAttemptUpsertWithWhereUniqueNestedInput!]
}

input QuestionAttemptUpdateWithWhereUniqueNestedInput {
  where: QuestionAttemptWhereUniqueInput!
  data: QuestionAttemptUpdateDataInput!
}

input QuestionAttemptUpsertWithWhereUniqueNestedInput {
  where: QuestionAttemptWhereUniqueInput!
  update: QuestionAttemptUpdateDataInput!
  create: QuestionAttemptCreateInput!
}

input QuestionAttemptWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionAttemptWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionAttemptWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionAttemptWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  isCorrect: Boolean

  """All values that are not equal to given value."""
  isCorrect_not: Boolean
  isConfident: Boolean

  """All values that are not equal to given value."""
  isConfident_not: Boolean
  question: QuestionWhereInput
  option: OptionWhereInput
  _MagicalBackRelation_QuestionAttemptToQuizAttempt_every: QuizAttemptWhereInput
  _MagicalBackRelation_QuestionAttemptToQuizAttempt_some: QuizAttemptWhereInput
  _MagicalBackRelation_QuestionAttemptToQuizAttempt_none: QuizAttemptWhereInput
}

input QuestionAttemptWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type QuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  prompt: String!
  options: OptionCreateManyInput
  concept: ConceptCreateOneInput
}

input QuestionCreateManyInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

input QuestionCreateOneInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
}

"""An edge in a connection."""
type QuestionEdge {
  """The item at the end of the edge."""
  node: Question!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  prompt_ASC
  prompt_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type QuestionPreviousValues {
  id: ID!
  prompt: String!
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
}

input QuestionUpdateDataInput {
  prompt: String
  options: OptionUpdateManyInput
  concept: ConceptUpdateOneInput
}

input QuestionUpdateInput {
  prompt: String
  options: OptionUpdateManyInput
  concept: ConceptUpdateOneInput
}

input QuestionUpdateManyInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
  disconnect: [QuestionWhereUniqueInput!]
  delete: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueNestedInput!]
  upsert: [QuestionUpsertWithWhereUniqueNestedInput!]
}

input QuestionUpdateOneInput {
  create: QuestionCreateInput
  connect: QuestionWhereUniqueInput
  delete: Boolean
  update: QuestionUpdateDataInput
  upsert: QuestionUpsertNestedInput
}

input QuestionUpdateWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateDataInput!
}

input QuestionUpsertNestedInput {
  update: QuestionUpdateDataInput!
  create: QuestionCreateInput!
}

input QuestionUpsertWithWhereUniqueNestedInput {
  where: QuestionWhereUniqueInput!
  update: QuestionUpdateDataInput!
  create: QuestionCreateInput!
}

input QuestionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuestionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuestionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuestionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  prompt: String

  """All values that are not equal to given value."""
  prompt_not: String

  """All values that are contained in given list."""
  prompt_in: [String!]

  """All values that are not contained in given list."""
  prompt_not_in: [String!]

  """All values less than the given value."""
  prompt_lt: String

  """All values less than or equal the given value."""
  prompt_lte: String

  """All values greater than the given value."""
  prompt_gt: String

  """All values greater than or equal the given value."""
  prompt_gte: String

  """All values containing the given string."""
  prompt_contains: String

  """All values not containing the given string."""
  prompt_not_contains: String

  """All values starting with the given string."""
  prompt_starts_with: String

  """All values not starting with the given string."""
  prompt_not_starts_with: String

  """All values ending with the given string."""
  prompt_ends_with: String

  """All values not ending with the given string."""
  prompt_not_ends_with: String
  options_every: OptionWhereInput
  options_some: OptionWhereInput
  options_none: OptionWhereInput
  concept: ConceptWhereInput
  _MagicalBackRelation_QuestionToQuiz_every: QuizWhereInput
  _MagicalBackRelation_QuestionToQuiz_some: QuizWhereInput
  _MagicalBackRelation_QuestionToQuiz_none: QuizWhereInput
  _MagicalBackRelation_QuestionToQuestionAttempt_every: QuestionAttemptWhereInput
  _MagicalBackRelation_QuestionToQuestionAttempt_some: QuestionAttemptWhereInput
  _MagicalBackRelation_QuestionToQuestionAttempt_none: QuestionAttemptWhereInput
}

input QuestionWhereUniqueInput {
  id: ID
}

type Quiz implements Node {
  id: ID!
  createdAt: DateTime!
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question!]
  title: String!
}

type QuizAttempt implements Node {
  id: ID!
  student(where: StudentWhereInput): Student!
  quiz(where: QuizWhereInput): Quiz!
  createdAt: DateTime!
  completed: DateTime!
  questionAttempts(where: QuestionAttemptWhereInput, orderBy: QuestionAttemptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuestionAttempt!]
  score: Float
  conceptConfidences(where: ConceptConfidenceWhereInput, orderBy: ConceptConfidenceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ConceptConfidence!]
  totalConfidenceError: Float
  totalConfidenceBias: Float
}

"""A connection to a list of items."""
type QuizAttemptConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuizAttemptEdge]!
  aggregate: AggregateQuizAttempt!
}

input QuizAttemptCreateInput {
  completed: DateTime!
  score: Float
  totalConfidenceError: Float
  totalConfidenceBias: Float
  student: StudentCreateOneWithoutQuizAttemptsInput!
  quiz: QuizCreateOneInput!
  questionAttempts: QuestionAttemptCreateManyInput
  conceptConfidences: ConceptConfidenceCreateManyInput
}

input QuizAttemptCreateManyWithoutStudentInput {
  create: [QuizAttemptCreateWithoutStudentInput!]
  connect: [QuizAttemptWhereUniqueInput!]
}

input QuizAttemptCreateWithoutStudentInput {
  completed: DateTime!
  score: Float
  totalConfidenceError: Float
  totalConfidenceBias: Float
  quiz: QuizCreateOneInput!
  questionAttempts: QuestionAttemptCreateManyInput
  conceptConfidences: ConceptConfidenceCreateManyInput
}

"""An edge in a connection."""
type QuizAttemptEdge {
  """The item at the end of the edge."""
  node: QuizAttempt!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuizAttemptOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  completed_ASC
  completed_DESC
  score_ASC
  score_DESC
  totalConfidenceError_ASC
  totalConfidenceError_DESC
  totalConfidenceBias_ASC
  totalConfidenceBias_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QuizAttemptPreviousValues {
  id: ID!
  createdAt: DateTime!
  completed: DateTime!
  score: Float
  totalConfidenceError: Float
  totalConfidenceBias: Float
}

type QuizAttemptSubscriptionPayload {
  mutation: MutationType!
  node: QuizAttempt
  updatedFields: [String!]
  previousValues: QuizAttemptPreviousValues
}

input QuizAttemptSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuizAttemptSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuizAttemptSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuizAttemptSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuizAttemptWhereInput
}

input QuizAttemptUpdateInput {
  completed: DateTime
  score: Float
  totalConfidenceError: Float
  totalConfidenceBias: Float
  student: StudentUpdateOneWithoutQuizAttemptsInput
  quiz: QuizUpdateOneInput
  questionAttempts: QuestionAttemptUpdateManyInput
  conceptConfidences: ConceptConfidenceUpdateManyInput
}

input QuizAttemptUpdateManyWithoutStudentInput {
  create: [QuizAttemptCreateWithoutStudentInput!]
  connect: [QuizAttemptWhereUniqueInput!]
  disconnect: [QuizAttemptWhereUniqueInput!]
  delete: [QuizAttemptWhereUniqueInput!]
  update: [QuizAttemptUpdateWithWhereUniqueWithoutStudentInput!]
  upsert: [QuizAttemptUpsertWithWhereUniqueWithoutStudentInput!]
}

input QuizAttemptUpdateWithoutStudentDataInput {
  completed: DateTime
  score: Float
  totalConfidenceError: Float
  totalConfidenceBias: Float
  quiz: QuizUpdateOneInput
  questionAttempts: QuestionAttemptUpdateManyInput
  conceptConfidences: ConceptConfidenceUpdateManyInput
}

input QuizAttemptUpdateWithWhereUniqueWithoutStudentInput {
  where: QuizAttemptWhereUniqueInput!
  data: QuizAttemptUpdateWithoutStudentDataInput!
}

input QuizAttemptUpsertWithWhereUniqueWithoutStudentInput {
  where: QuizAttemptWhereUniqueInput!
  update: QuizAttemptUpdateWithoutStudentDataInput!
  create: QuizAttemptCreateWithoutStudentInput!
}

input QuizAttemptWhereInput {
  """Logical AND on all given filters."""
  AND: [QuizAttemptWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuizAttemptWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuizAttemptWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  completed: DateTime

  """All values that are not equal to given value."""
  completed_not: DateTime

  """All values that are contained in given list."""
  completed_in: [DateTime!]

  """All values that are not contained in given list."""
  completed_not_in: [DateTime!]

  """All values less than the given value."""
  completed_lt: DateTime

  """All values less than or equal the given value."""
  completed_lte: DateTime

  """All values greater than the given value."""
  completed_gt: DateTime

  """All values greater than or equal the given value."""
  completed_gte: DateTime
  score: Float

  """All values that are not equal to given value."""
  score_not: Float

  """All values that are contained in given list."""
  score_in: [Float!]

  """All values that are not contained in given list."""
  score_not_in: [Float!]

  """All values less than the given value."""
  score_lt: Float

  """All values less than or equal the given value."""
  score_lte: Float

  """All values greater than the given value."""
  score_gt: Float

  """All values greater than or equal the given value."""
  score_gte: Float
  totalConfidenceError: Float

  """All values that are not equal to given value."""
  totalConfidenceError_not: Float

  """All values that are contained in given list."""
  totalConfidenceError_in: [Float!]

  """All values that are not contained in given list."""
  totalConfidenceError_not_in: [Float!]

  """All values less than the given value."""
  totalConfidenceError_lt: Float

  """All values less than or equal the given value."""
  totalConfidenceError_lte: Float

  """All values greater than the given value."""
  totalConfidenceError_gt: Float

  """All values greater than or equal the given value."""
  totalConfidenceError_gte: Float
  totalConfidenceBias: Float

  """All values that are not equal to given value."""
  totalConfidenceBias_not: Float

  """All values that are contained in given list."""
  totalConfidenceBias_in: [Float!]

  """All values that are not contained in given list."""
  totalConfidenceBias_not_in: [Float!]

  """All values less than the given value."""
  totalConfidenceBias_lt: Float

  """All values less than or equal the given value."""
  totalConfidenceBias_lte: Float

  """All values greater than the given value."""
  totalConfidenceBias_gt: Float

  """All values greater than or equal the given value."""
  totalConfidenceBias_gte: Float
  student: StudentWhereInput
  quiz: QuizWhereInput
  questionAttempts_every: QuestionAttemptWhereInput
  questionAttempts_some: QuestionAttemptWhereInput
  questionAttempts_none: QuestionAttemptWhereInput
  conceptConfidences_every: ConceptConfidenceWhereInput
  conceptConfidences_some: ConceptConfidenceWhereInput
  conceptConfidences_none: ConceptConfidenceWhereInput
}

input QuizAttemptWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type QuizConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuizEdge]!
  aggregate: AggregateQuiz!
}

input QuizCreateInput {
  title: String!
  questions: QuestionCreateManyInput
}

input QuizCreateManyInput {
  create: [QuizCreateInput!]
  connect: [QuizWhereUniqueInput!]
}

input QuizCreateOneInput {
  create: QuizCreateInput
  connect: QuizWhereUniqueInput
}

"""An edge in a connection."""
type QuizEdge {
  """The item at the end of the edge."""
  node: Quiz!

  """A cursor for use in pagination."""
  cursor: String!
}

enum QuizOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type QuizPreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
}

type QuizSubscriptionPayload {
  mutation: MutationType!
  node: Quiz
  updatedFields: [String!]
  previousValues: QuizPreviousValues
}

input QuizSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [QuizSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuizSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuizSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: QuizWhereInput
}

input QuizUpdateDataInput {
  title: String
  questions: QuestionUpdateManyInput
}

input QuizUpdateInput {
  title: String
  questions: QuestionUpdateManyInput
}

input QuizUpdateManyInput {
  create: [QuizCreateInput!]
  connect: [QuizWhereUniqueInput!]
  disconnect: [QuizWhereUniqueInput!]
  delete: [QuizWhereUniqueInput!]
  update: [QuizUpdateWithWhereUniqueNestedInput!]
  upsert: [QuizUpsertWithWhereUniqueNestedInput!]
}

input QuizUpdateOneInput {
  create: QuizCreateInput
  connect: QuizWhereUniqueInput
  delete: Boolean
  update: QuizUpdateDataInput
  upsert: QuizUpsertNestedInput
}

input QuizUpdateWithWhereUniqueNestedInput {
  where: QuizWhereUniqueInput!
  data: QuizUpdateDataInput!
}

input QuizUpsertNestedInput {
  update: QuizUpdateDataInput!
  create: QuizCreateInput!
}

input QuizUpsertWithWhereUniqueNestedInput {
  where: QuizWhereUniqueInput!
  update: QuizUpdateDataInput!
  create: QuizCreateInput!
}

input QuizWhereInput {
  """Logical AND on all given filters."""
  AND: [QuizWhereInput!]

  """Logical OR on all given filters."""
  OR: [QuizWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [QuizWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  questions_every: QuestionWhereInput
  questions_some: QuestionWhereInput
  questions_none: QuestionWhereInput
  _MagicalBackRelation_CourseToQuiz_every: CourseWhereInput
  _MagicalBackRelation_CourseToQuiz_some: CourseWhereInput
  _MagicalBackRelation_CourseToQuiz_none: CourseWhereInput
  _MagicalBackRelation_QuizToQuizAttempt_every: QuizAttemptWhereInput
  _MagicalBackRelation_QuizToQuizAttempt_some: QuizAttemptWhereInput
  _MagicalBackRelation_QuizToQuizAttempt_none: QuizAttemptWhereInput
}

input QuizWhereUniqueInput {
  id: ID
}

type Student implements Node {
  id: ID!
  ltiUserId: String!
  email: String!
  name: String!
  quizAttempts(where: QuizAttemptWhereInput, orderBy: QuizAttemptOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [QuizAttempt!]
}

"""A connection to a list of items."""
type StudentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StudentEdge]!
  aggregate: AggregateStudent!
}

input StudentCreateInput {
  ltiUserId: String!
  email: String!
  name: String!
  quizAttempts: QuizAttemptCreateManyWithoutStudentInput
}

input StudentCreateOneWithoutQuizAttemptsInput {
  create: StudentCreateWithoutQuizAttemptsInput
  connect: StudentWhereUniqueInput
}

input StudentCreateWithoutQuizAttemptsInput {
  ltiUserId: String!
  email: String!
  name: String!
}

"""An edge in a connection."""
type StudentEdge {
  """The item at the end of the edge."""
  node: Student!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StudentOrderByInput {
  id_ASC
  id_DESC
  ltiUserId_ASC
  ltiUserId_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StudentPreviousValues {
  id: ID!
  ltiUserId: String!
  email: String!
  name: String!
}

type StudentSubscriptionPayload {
  mutation: MutationType!
  node: Student
  updatedFields: [String!]
  previousValues: StudentPreviousValues
}

input StudentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StudentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StudentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StudentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StudentWhereInput
}

input StudentUpdateInput {
  ltiUserId: String
  email: String
  name: String
  quizAttempts: QuizAttemptUpdateManyWithoutStudentInput
}

input StudentUpdateOneWithoutQuizAttemptsInput {
  create: StudentCreateWithoutQuizAttemptsInput
  connect: StudentWhereUniqueInput
  delete: Boolean
  update: StudentUpdateWithoutQuizAttemptsDataInput
  upsert: StudentUpsertWithoutQuizAttemptsInput
}

input StudentUpdateWithoutQuizAttemptsDataInput {
  ltiUserId: String
  email: String
  name: String
}

input StudentUpsertWithoutQuizAttemptsInput {
  update: StudentUpdateWithoutQuizAttemptsDataInput!
  create: StudentCreateWithoutQuizAttemptsInput!
}

input StudentWhereInput {
  """Logical AND on all given filters."""
  AND: [StudentWhereInput!]

  """Logical OR on all given filters."""
  OR: [StudentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StudentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  ltiUserId: String

  """All values that are not equal to given value."""
  ltiUserId_not: String

  """All values that are contained in given list."""
  ltiUserId_in: [String!]

  """All values that are not contained in given list."""
  ltiUserId_not_in: [String!]

  """All values less than the given value."""
  ltiUserId_lt: String

  """All values less than or equal the given value."""
  ltiUserId_lte: String

  """All values greater than the given value."""
  ltiUserId_gt: String

  """All values greater than or equal the given value."""
  ltiUserId_gte: String

  """All values containing the given string."""
  ltiUserId_contains: String

  """All values not containing the given string."""
  ltiUserId_not_contains: String

  """All values starting with the given string."""
  ltiUserId_starts_with: String

  """All values not starting with the given string."""
  ltiUserId_not_starts_with: String

  """All values ending with the given string."""
  ltiUserId_ends_with: String

  """All values not ending with the given string."""
  ltiUserId_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  quizAttempts_every: QuizAttemptWhereInput
  quizAttempts_some: QuizAttemptWhereInput
  quizAttempts_none: QuizAttemptWhereInput
}

input StudentWhereUniqueInput {
  id: ID
  ltiUserId: String
}

type Subscription {
  instructor(where: InstructorSubscriptionWhereInput): InstructorSubscriptionPayload
  student(where: StudentSubscriptionWhereInput): StudentSubscriptionPayload
  quizAttempt(where: QuizAttemptSubscriptionWhereInput): QuizAttemptSubscriptionPayload
  quiz(where: QuizSubscriptionWhereInput): QuizSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  option(where: OptionSubscriptionWhereInput): OptionSubscriptionPayload
  conceptConfidence(where: ConceptConfidenceSubscriptionWhereInput): ConceptConfidenceSubscriptionPayload
  questionAttempt(where: QuestionAttemptSubscriptionWhereInput): QuestionAttemptSubscriptionPayload
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
  concept(where: ConceptSubscriptionWhereInput): ConceptSubscriptionPayload
}
