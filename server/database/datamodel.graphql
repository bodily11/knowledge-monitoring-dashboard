# Users
type Instructor {
    id: ID! @unique
    email: String! @unique
    password: String!
    createdAt: DateTime!
    courses: [Course!]!
}

type Student {
    id: ID! @unique
    # This is a simplistic approach, where each student has to be created and logged in via LTI.
    ltiUserId: String! @unique
    # If one student is in multiple courses that each have a different LTI user ID, they will have multiple 'accounts' on wadayano, so email isn't necessarily unique
    email: String!
    name: String!
    courses: [Course!]!
    # If a student is deleted, delete their quiz and survey attempts (not that the other side of this relation, on quizAttempt or surveyResult is SET_NULL, e.g. deleting an attempt removes it from the student, but doesn't delete the student)
    quizAttempts: [QuizAttempt!]! @relation(name: "StudentQuizAttempts", onDelete: CASCADE)
    surveyResults: [SurveyResult!]! @relation(name: "StudentSurveyResults", onDelete: CASCADE)
}

# Course data hierarchy
type Course {
    id: ID! @unique
    title: String!
    createdAt: DateTime!
    quizzes: [Quiz!]! @relation(name: "CourseQuizzes", onDelete: CASCADE)
    concepts: [String!]!
    instructors: [Instructor!]!
    students: [Student!]!
    ltiSecret: String!
    survey: Json
    surveyResults: [SurveyResult!]! @relation(name: "CourseSurveyResults", onDelete: CASCADE)
}

enum QuizType {
    PRACTICE
    GRADED
}

type Quiz {
    id: ID! @unique
    createdAt: DateTime!
    quizAttempts: [QuizAttempt!]! @relation(name: "QuizQuizAttempts", onDelete: CASCADE)
    questions: [Question!]! @relation(name: "QuizQuestions", onDelete: CASCADE)
    concepts: [String!]!
    course: Course  @relation(name: "CourseQuizzes", onDelete: SET_NULL)
    title: String!
    type: QuizType
}

type Question {
    id: ID! @unique
    options: [Option!]! @relation(name: "QuestionOptions", onDelete: CASCADE)
    prompt: String!
    concept: String
}

type Option {
    id: ID! @unique
    question: Question @relation(name: "QuestionOptions", onDelete: SET_NULL)
    isCorrect: Boolean
    text: String!
    # These are needed as backlinks, since QuestionAttempt links to them. Without this, cascading deletes fail
    questionAttempts: [QuestionAttempt!]! @relation(name: "SelectedAnswerAttemptRelation", onDelete: SET_NULL)
    correctQuestionAttempts: [QuestionAttempt!]! @relation(name: "CorrectAnswerAttemptRelation", onDelete: SET_NULL)
}

# Student quiz attempt data
type QuizAttempt {
    id: ID! @unique
    student: Student! @relation(name: "StudentQuizAttempts", onDelete: SET_NULL)
    quiz: Quiz! @relation(name: "QuizQuizAttempts", onDelete: SET_NULL)
    createdAt: DateTime!
    ltiSessionInfo: Json
    completed: DateTime
    postSucceeded: Boolean # True/false if it was a graded attempt. Null if practice attempt
    questionAttempts: [QuestionAttempt!]! @relation(name: "QuizAttemptQuestionAttempts", onDelete: CASCADE)
    score: Float # (correct/total). No score indicates the attempt was started, but not yet finished
    conceptConfidences: [ConceptConfidence!]! @relation(name: "QuizAttemptConceptConfidences", onDelete: CASCADE)
}

type QuestionAttempt {
    id: ID! @unique
    createdAt: DateTime!
    question: Question!
    option: Option! @relation(name: "SelectedAnswerAttemptRelation", onDelete: SET_NULL)
    isCorrect: Boolean! # Yes, this is duplicating isCorrect from Option, but student should be able to review their past attempts without us always having to expose isCorrect on Options
    correctOption: Option! @relation(name: "CorrectAnswerAttemptRelation", onDelete: SET_NULL) # See note for isCorrect
    isConfident: Boolean!
}

type ConceptConfidence {
    id: ID! @unique
    concept: String
    confidence: Int
}
 
type SurveyResult {
    id: ID! @unique
    createdAt: DateTime!
    course: Course! @relation(name: "CourseSurveyResults", onDelete: SET_NULL)
    student: Student! @relation(name: "StudentSurveyResults", onDelete: SET_NULL)
    answers: Json!
 }