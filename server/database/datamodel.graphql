# This is the Prisma datamodel, from which Prisma generates src/generated/prisma.graphql. The generated schema is the actual schema used for the database-level (private) GraphQL API.
# The application-level (public) GraphQL API schema is defined in schema.graphql, and should import relevant data types from this datamodel.graphql. The app-level API will then interact with the DB-level Prisma API.

# After updating this file, run `prisma deploy` from the `server` directory (not in the `database` directory) on the dev machine. This will update the database for the dev environment, and download the new generated Prisma schema. (Run `prisma deploy` with the new datamodel on the production EC2 instance to migrate the production DB before deploying code that uses it; e.g. `git pull`, then `prisma deploy` in `database` directory, then `pm2 restart index` if successful)

# Users
type Instructor {
    id: ID! @id
    email: String! @unique
    password: String!
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    courses: [Course!]!
}

type InstructorPasswordResetToken {
    id: ID! @id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    instructor: Instructor! @relation(link: INLINE)
}

type Student {
    id: ID! @id
    # This is a simplistic approach, where each student has to be created and logged in via LTI.
    ltiUserId: String! @unique
    # If one student is in multiple courses that each have a different LTI user ID, they will have multiple 'accounts' on wadayano, so email isn't necessarily unique
    email: String!
    name: String!
    courses: [Course!]!
    # If a student is deleted, delete their quiz and survey attempts (note that the other side of this relation, on quizAttempt or surveyResult is SET_NULL, e.g. deleting an attempt removes it from the student, but doesn't delete the student)
    quizAttempts: [QuizAttempt!]! @relation(name: "StudentQuizAttempts", onDelete: CASCADE)
    surveyResults: [SurveyResult!]! @relation(name: "StudentSurveyResults", onDelete: CASCADE)
    courseConsents: [CourseConsent!]! @relation(name: "StudentCourseConsents", onDelete: CASCADE)
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
}

# Course data hierarchy
type Course {
    id: ID! @id
    title: String!
    number: String
    lmsUrl: String
    consentFormUrl: String
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    quizzes: [Quiz!]! @relation(name: "CourseQuizzes", onDelete: CASCADE)
    instructors: [Instructor!]!
    students: [Student!]!
    ltiSecret: String!
    survey: Json
    surveyResults: [SurveyResult!]! @relation(name: "CourseSurveyResults", onDelete: CASCADE)
    pendingCourseInvites: [PendingCourseInvite!]! @relation(name: "CoursePendingCourseInvite", onDelete: CASCADE)
}

type PendingCourseInvite {
    id: ID! @id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    email: String!
    course: Course! @relation(link: INLINE, name: "CoursePendingCourseInvite", onDelete: SET_NULL)
}

type CourseConsent {
    id: ID! @id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    course: Course! @relation(link: INLINE, name: "CourseCourseConsents", onDelete: SET_NULL)
    student: Student! @relation(link: INLINE, name: "StudentCourseConsents", onDelete: SET_NULL)
    consent: String!
}

enum QuizType {
    PRACTICE
    GRADED
}

type Quiz {
    id: ID! @id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    quizAttempts: [QuizAttempt!]! @relation(name: "QuizQuizAttempts", onDelete: CASCADE)
    questions: [Question!]! @relation(name: "QuizQuestions", onDelete: CASCADE)
    # orderedQuestionIds is not used, but is here to support future question reordering
    # Currently, questions in quizzes are presented in a random order
    orderedQuestionIds: [ID!] @scalarList(strategy: RELATION)
    course: Course @relation(link: INLINE, name: "CourseQuizzes", onDelete: SET_NULL)
    title: String!
    type: QuizType!
}

enum QuestionType {
    MULTIPLE_CHOICE
    SHORT_ANSWER
}

type Question {
    id: ID! @id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    # options and correctShortAnswers may be empty arrays, but must be present
    options: [Option!]! @relation(name: "QuestionOptions", onDelete: CASCADE)
    correctShortAnswers: [String!]! @scalarList(strategy: RELATION)
    prompt: String!
    concept: String
    type: QuestionType!
}

type Option {
    id: ID! @id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    question: Question @relation(link: INLINE, name: "QuestionOptions", onDelete: SET_NULL)
    # On the application-level graphql server, the isCorrect resolver is overwritten to always return false for students
    isCorrect: Boolean
    text: String!
    # These are needed as backlinks, since QuestionAttempt links to them. Without this, cascading deletes fail
    questionAttempts: [QuestionAttempt!]! @relation(name: "SelectedAnswerAttemptRelation", onDelete: CASCADE)
    correctQuestionAttempts: [QuestionAttempt!]! @relation(name: "CorrectAnswerAttemptRelation", onDelete: CASCADE)
}

# Student quiz attempt data
type QuizAttempt {
    id: ID! @id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    student: Student! @relation(link: INLINE, name: "StudentQuizAttempts", onDelete: SET_NULL)
    quiz: Quiz! @relation(link: INLINE, name: "QuizQuizAttempts", onDelete: SET_NULL)
    ltiSessionInfo: Json
    completed: DateTime
    postSucceeded: Boolean # True/false if it was a graded attempt. Null if practice attempt
    questionAttempts: [QuestionAttempt!]! @relation(name: "QuizAttemptQuestionAttempts", onDelete: CASCADE)
    score: Float # (correct/total). No score indicates the attempt was started, but not yet finished
    conceptConfidences: [ConceptConfidence!]! @relation(name: "QuizAttemptConceptConfidences", onDelete: CASCADE)
}

type QuestionAttempt {
    id: ID! @id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    question: Question! @relation(link: INLINE)
    option: Option @relation(link: INLINE, name: "SelectedAnswerAttemptRelation", onDelete: SET_NULL)
    shortAnswer: String # Original student-inputted short answer
    isCorrect: Boolean! # Yes, this is duplicating isCorrect from Option, but student should be able to review their past attempts without us always having to expose isCorrect on Options or the correctShortAnswers
    correctOption: Option @relation(link: INLINE, name: "CorrectAnswerAttemptRelation", onDelete: SET_NULL) # See note for isCorrect
    correctShortAnswer: String # See note for isCorrect
    isConfident: Boolean!
}

type ConceptConfidence {
    id: ID! @id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    concept: String
    confidence: Int
}
 
type SurveyResult {
    id: ID! @id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    course: Course! @relation(link: INLINE, name: "CourseSurveyResults", onDelete: SET_NULL)
    student: Student! @relation(link: INLINE, name: "StudentSurveyResults", onDelete: SET_NULL)
    answers: Json!
 }

enum TrackingEventAction {
    STUDENT_REVIEW_QUIZ_ATTEMPT
    STUDENT_REVIEW_CONCEPT
}

type TrackingEvent {
    id: ID! @id
    createdAt: DateTime! @createdAt
    updatedAt: DateTime! @updatedAt
    # Since Prisma currently doesnâ€™t support polymorphic relations (ETA Q3 2019),
    # store either a student or instructor. See https://github.com/prisma/prisma/issues/83#issuecomment-477160057
    student: Student @relation(link: INLINE)
    instructor: Instructor @relation(link: INLINE)
    action: TrackingEventAction!
    context: Json!
}
